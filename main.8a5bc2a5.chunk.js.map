{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","title","dated","images","primaryImageUrl","description","culture","style","technique","medium","dimensions","department","people","division","contact","creditline","id","src","alt","Loading","Preview","props","searchResults","setFeaturedResult","info","fetchPage","pageUrl","results","disabled","prev","next","map","record","idx","key","primaryimageurl","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","catch","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a5bc2a5.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=baa7e246-cb2a-4257-a9f0-c297129d5b67';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = ({searchTerm, searchValue, setIsLoading, setSearchResults}) => {\n\n  return <span className=\"content\">\n      <a href=\"#\" onClick={async (event) => {\n          event.preventDefault()\n          setIsLoading(true)\n          try{\n              const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n              setSearchResults(result)\n\n          } catch(error){\n              console.error(error)\n          } finally{\n              setIsLoading(false)\n          }\n      }}>{searchTerm}</a>\n      </span>\n\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\n\nconst Feature = ({featuredResult}) => {\n    if (!featuredResult) {\n        return <main id=\"feature\"></main>\n    } else {\n        const {title, dated, images, primaryImageUrl, description, culture, style, technique, medium, dimensions, people, department, division, contact, creditline} = featuredResult;\n\n            return <main id=\"feature\">\n                <div className=\"object-feature\">\n                    <header>\n                        <h3><Searchable /></h3>\n                        <h3>{title}</h3>\n                        <h4>{dated}</h4>\n                    </header>\n                <section className=\"facts\">\n                    <span className=\"description\">{description}</span>\n                    <span className=\"culture\">{culture}</span>\n                    <span className=\"style\">{style}</span>\n                    <span className=\"technique\">{technique}</span>\n                    <span className=\"medium\">{medium}</span>\n                    <span className=\"dimensions\">{dimensions}</span>\n                    {/* <span className=\"people\">\n                        {people ? people.map((person, index) => {\n                            return <>\n                                <span className='title'>Person</span>\n                                <Searchable  key={index} searchTerm='person' searchValue={person.displayname} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> \n                        </>}) : ''}\n                    </span> */}\n\n                    <span className=\"department\">{department}</span>\n                    <span className=\"division\">{division}</span>\n                    <span className=\"contact\">{contact}</span>\n                    <span className=\"creditline\">{creditline}</span>\n                </section>\n                <section className=\"photos\">\n                    <img src={images} alt={primaryImageUrl} />\n                </section>\n            </div>\n        </main>\n}}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\n const Loading = () => {\n\n    \n     return <div id='loading'>\n                <h2 className='message'>Searching...</h2>\n            </div>\n }\n\n export default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\nconst { searchResults, setSearchResults, setFeaturedResult, setIsLoading } = props;\nconst { info, records } = searchResults;\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n          records.map((record, idx) => {\n              return    <div\n                        key={ idx }\n                        className=\"object-preview\"\n                        onClick={(event) => {\n                            event.preventDefault()\n                            setFeaturedResult(record)\n              }}>\n                {\n                    record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null\n                }\n                {\n                    record.title ? <h3>{ record.title }</h3> : <h3>! MISSING INFO !</h3>\n                }\n                  \n              </div>\n          })\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = ( {setIsLoading, setSearchResults} ) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n   const [ centuryList, setCenturyList ] = useState( [] );\n   const [ classificationList, setClassificationList ] = useState( [] );\n   const [ queryString, setQueryString ] = useState( '' );\n   const [ century, setCentury ] = useState( 'any' );\n   const [ classification, setClassification ] = useState( 'any' );\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n        .then( ( [centuryList, classificationList] ) => {\n            setCenturyList(centuryList)\n            setClassificationList(classificationList)\n        })\n        .catch(error => {\n            console.error(error)\n        })\n  }, []);\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault();\n    setIsLoading(true)\n    try {\n        const results = await fetchQueryResults({ century, classification, queryString });\n        setSearchResults(results);\n    } catch(error){\n        console.error(error)\n    } finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */}\n        {\n          classificationList.map((classification, idx) => {\n            return <option key={`classification- ${idx}`}\n            value={ classification.name } >{ classification.name}</option>\n          })\n        }\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */}\n        {\n          centuryList.map((century, idx) => {\n            return <option key={`century- ${idx}`}\n            value={ century.name }> { century.name }</option>\n          })\n        }\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\nconst Title = () => {\n\n    \n    return <div id='title'>\n               <h1>\n                   The Art Collector\n               </h1>\n               <h5>\n                   Search the Harvard Art Museums' Private Collections\n               </h5>\n           </div>\n}\n\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n   const [ searchResults, setSearchResults ] = useState({ info: {}, records: [] });\n   const [ featuredResult, setFeaturedResult ] = useState( null );\n   const [isLoading, setIsLoading] = useState( false );\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {/* <Loading /> use a ternary and render null if isLoading is false */}\n      { isLoading ? <Loading /> : null }\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}